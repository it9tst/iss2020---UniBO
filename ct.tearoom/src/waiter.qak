System waiter

// MESSAGES
// Message between waiter - client
Dispatch client_ready_to_order 	: client_ready_to_order (ID)
Dispatch client_payment 		: client_payment (ID)

// Message between waiter - smartbell
Request smartbell_enter_request	: smartbell_enter_request (ID)		
Reply   client_accept			: client_accept (TABLE)




// CONTEXT
Context ctxwaiter ip [host="localhost" port=8010]
Context ctxsmartbell ip [host="127.0.0.1" port=8020]
Context ctxclient ip [host="127.0.0.1" port=8030]

ExternalQActor smartbell context ctxsmartbell
ExternalQActor client context ctxclient


QActor waiter context ctxwaiter {
	
	[#
		var Table1_free = true
		var Table1_clean = true
		var Table2_free = true
		var Table2_clean = true
	#]
	
	State s0 initial {
		// Initial state
		println("Waiter start")
	}
	Transition t0 whenRequest smartbell_enter_request -> accept

	State accept {
		onMsg(smartbell_enter_request : smartbell_enter_request(ID)){
			println("Waiter fa sedere il cliente con ID: ${payloadArg(0)}")
		}
		replyTo smartbell_enter_request with client_accept : client_accept (TABLE)
	}
	Transition t1 whenMsg client_ready_to_order -> takeOrder

	State takeOrder{
		onMsg(client_ready_to_order : client_ready_to_order(ID)){
			println("Waiter prende l'ordinazione dal cliente con ID: ${payloadArg(0)}")
		}
	}
	Transition t2 whenMsg client_payment -> collectPayment
	
	State collectPayment {
		onMsg(client_payment : client_payment(ID)){
			println("Waiter prende i soldi dal cliente con ID: ${payloadArg(0)}")
		}
	}
	Goto endService
	
	State endService {
		println("Waiter termina il servizio")
	}
	Goto endWork

	State endWork {
		// Waiter end work
		println("Waiter end work")
		terminate 0
	}
}