System smartbell

// MESSAGES
// Message between smartbell - client
Request enter_request_client	: enter_request_client (PAYLOAD)
Reply   enter_reply_from_smartbell	: enter_reply_from_smartbell (ID)

// Message between smartbell - waiter
Request enter	: enter (ID)		// smarbell chiede se il cliente puÃ² entrare, dopo aver rilevato la temperatura corporea
Reply   accept	: accept (C)		// waiter risponde allo smartbell



// CONTEXT
Context ctxtearoom ip [host="localhost" port=9901]
Context ctxclient ip [host="localhost" port=9902]

ExternalQActor client context ctxclient
ExternalQActor waiter context ctxtearoom

QActor smartbell context ctxtearoom {
	[#
		
	#]
	
	State s0 initial {
		// Initial state
		println("Smartbell start")
	}
	Goto isRing
	
	State isRing {
		// Smartbell wait ring
		println("Smartbell wait ring")
	}
	Transition t0 	whenRequest enter_request_client -> checkTempClient
	
	State checkTempClient {
		// Smartbell check temp client
		println("Smartbell check temp client")
		
		if [# ClientTemp < Temp_max #] {
			
		} else {
			
		}
		
	}
	Transition t1 	whenReply 	smartbellEntryReply -> checkWaiterReply
	
	State endWork {
		// Smartbell end work
		println("Smartbell end work")
		terminate 0
	}
}