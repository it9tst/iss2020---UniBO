System smartbell

// MESSAGES
// Message between smartbell - client
Request enter_request_client	: enter_request_client (TEMP)
Reply   enter_reply_from_smartbell	: enter_reply_from_smartbell (ID)

// Message between smartbell - waiter
Request smartbell_enter_request	: smartbell_enter_request (ID)		
Reply   client_accept		: client_accept (TABLE)




// CONTEXT
Context ctxwaiter ip [host="localhost" port=8010]
Context ctxsmartbell ip [host="127.0.0.1" port=8020]
Context ctxclient ip [host="127.0.0.1" port=8030]

ExternalQActor waiter context ctxwaiter
ExternalQActor client context ctxclient


QActor smartbell context ctxsmartbell {
	[#
		val Temp_max = 37.5
		var Client_temp = 0.0
		var Id_client = 0
	#]
	
	State s0 initial {
		// Initial state
		println("Smartbell start")
	}
	Goto waitRing
	
	State waitRing {
		// Smartbell wait ring
		println("Smartbell wait ring")
	}
	Transition t0 	whenRequest enter_request_client -> checkTempClient
								
	State checkTempClient {
		// Smartbell check temp client
		println("Smartbell check temp client")
		
		onMsg(enter_request_client : enter_request_client(TEMP)){
			println("Richiesta di entrata da CLIENT: $Id_client con TEMP: ${payloadArg(0)}")
			[# Client_temp = payloadArg(0).toDouble() #]
		}
		
		if [# Client_temp < Temp_max #] {
			println("Puoi entrare")
			request waiter -m smartbell_enter_request : smartbell_enter_request ($Id_client)
		}
	}
	Transition t1 whenReply client_accept -> clientEnter
	
	State clientEnter{
		replyTo enter_request_client with enter_reply_from_smartbell : enter_reply_from_smartbell ($Id_client)
		[# Id_client++ #]
	}
	Goto endWork

	State endWork {
		// Smartbell end work
		println("Smartbell end work")
		terminate 0
	}
}