/* Generated by AN DISI Unibo */ 
package it.unibo.waiter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Table1_free = true
				var Table1_clean = true
				var Table2_free = true
				var Table2_clean = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Waiter start")
					}
					 transition(edgeName="t00",targetState="accept",cond=whenRequest("smartbell_enter_request"))
				}	 
				state("accept") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("smartbell_enter_request(ID)"), Term.createTerm("smartbell_enter_request(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Waiter fa sedere il cliente con ID: ${payloadArg(0)}")
						}
						answer("smartbell_enter_request", "client_accept", "client_accept(TABLE)"   )  
					}
					 transition(edgeName="t11",targetState="takeOrder",cond=whenDispatch("client_ready_to_order"))
				}	 
				state("takeOrder") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("client_ready_to_order(ID)"), Term.createTerm("client_ready_to_order(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Waiter prende l'ordinazione dal cliente con ID: ${payloadArg(0)}")
						}
					}
					 transition(edgeName="t22",targetState="collectPayment",cond=whenDispatch("client_payment"))
				}	 
				state("collectPayment") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("client_payment(ID)"), Term.createTerm("client_payment(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Waiter prende i soldi dal cliente con ID: ${payloadArg(0)}")
						}
					}
					 transition( edgeName="goto",targetState="endService", cond=doswitch() )
				}	 
				state("endService") { //this:State
					action { //it:State
						println("Waiter termina il servizio")
					}
					 transition( edgeName="goto",targetState="endWork", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("Waiter end work")
						terminate(0)
					}
				}	 
			}
		}
}
