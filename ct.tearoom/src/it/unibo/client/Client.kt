/* Generated by AN DISI Unibo */ 
package it.unibo.client

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var ID = ""
				var ORD = mutableListOf(caffe, cornetto)
				var m_tearoom_is_open = True
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Client start")
					}
					 transition(edgeName="t00",targetState="checkTearoomOpen",cond=whenRequest("tearoom_is_open_request"))
				}	 
				state("checkTearoomOpen") { //this:State
					action { //it:State
						println("Client check if tearoom is open")
						if(  m_tearoom_is_open  
						 ){println("Tearoom is open")
						println("Client rings the doorbell")
						request("enter_request_client", "enter_request_client(CanIEnter)" ,"smartbell" )  
						}
						else
						 {println("Tearoom is close")
						 forward("tearoom_is_open_dispatch", "tearoom_is_open_dispatch(Close)" ,"client" ) 
						 }
					}
					 transition(edgeName="t11",targetState="endWork",cond=whenReply("tearoom_is_open_reply"))
					transition(edgeName="t12",targetState="clientRejected",cond=whenDispatch("tearoom_is_open_dispatch"))
				}	 
				state("clientRejected") { //this:State
					action { //it:State
						println("Client go away")
					}
					 transition( edgeName="goto",targetState="endWork", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("Client end work")
						terminate(0)
					}
				}	 
			}
		}
}
