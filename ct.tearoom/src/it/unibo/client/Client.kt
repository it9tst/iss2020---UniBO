/* Generated by AN DISI Unibo */ 
package it.unibo.client

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var ID = 0
				var Client_temp = 36.0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("CLIENT | Start")
						updateResourceRep( "START"  
						)
					}
					 transition( edgeName="goto",targetState="ringBell", cond=doswitch() )
				}	 
				state("ringBell") { //this:State
					action { //it:State
						println("CLIENT | Rings the doorbell")
						updateResourceRep( "ringBell"  
						)
						request("enter_request_client", "enter_request_client($Client_temp)" ,"smartbell" )  
					}
					 transition(edgeName="t00",targetState="enter",cond=whenReply("enter_reply_from_smartbell"))
				}	 
				state("enter") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("enter_reply_from_smartbell(ID)"), Term.createTerm("enter_reply_from_smartbell(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("CLIENT | ID: ${payloadArg(0)} | Enter")
								updateResourceRep( "enter"  
								)
								 ID = payloadArg(0).toInt()  
						}
					}
					 transition( edgeName="goto",targetState="order", cond=doswitch() )
				}	 
				state("order") { //this:State
					action { //it:State
						println("CLIENT | ID: ${payloadArg(0)} | Would like to order")
						updateResourceRep( "order"  
						)
						forward("client_ready_to_order", "client_ready_to_order($ID)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="pay", cond=doswitch() )
				}	 
				state("pay") { //this:State
					action { //it:State
						println("CLIENT | ID: ${payloadArg(0)} | Would like to pay")
						updateResourceRep( "pay"  
						)
						forward("client_payment", "client_payment($ID)" ,"waiter" ) 
					}
					 transition( edgeName="goto",targetState="exit", cond=doswitch() )
				}	 
				state("exit") { //this:State
					action { //it:State
						println("CLIENT || ID: ${payloadArg(0)} | Exit")
						updateResourceRep( "exit"  
						)
					}
					 transition( edgeName="goto",targetState="endWork", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("CLIENT | ID: ${payloadArg(0)} | End work")
						updateResourceRep( "endWork"  
						)
						terminate(0)
					}
				}	 
			}
		}
}
