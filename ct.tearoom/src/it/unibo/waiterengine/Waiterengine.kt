/* Generated by AN DISI Unibo */ 
package it.unibo.waiterengine

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waiterengine ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				// Robot
				var StepTime = 260L
				val BackTime = 2 * StepTime / 3
				
				// Map
				val mapRoom = "teaRoomExplored"
				var XPoint = "0"
				var YPoint = "0"
		
				// Table task delay
				val TableClearTime = 4000L
				val TableCleanTime = 2000L
				val TableSanitizedTime = 2000L
		
				var CmdToMove = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("WAITERENGINE | Start")
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( mapRoom  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						forward("engineReady", "engineReady(PAYLOAD)" ,"waitermind" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("WAITERENGINE | Wait Cmd")
					}
					 transition(edgeName="t019",targetState="planDestination",cond=whenRequest("moveTo"))
					transition(edgeName="t020",targetState="endWork",cond=whenDispatch("end"))
				}	 
				state("planDestination") { //this:State
					action { //it:State
						println("WAITERENGINE | Plan Destination")
						updateResourceRep( "planDestination"  
						)
						if( checkMsgContent( Term.createTerm("moveTo(X,Y)"), Term.createTerm("moveTo(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												XPoint = payloadArg(0)
											    YPoint = payloadArg(1)			  
						}
						println("WAITERENGINE | Start moveTo ($XPoint, $YPoint)")
						itunibo.planner.plannerUtil.planForGoal( "$XPoint", "$YPoint"  )
					}
					 transition( edgeName="goto",targetState="readStep", cond=doswitch() )
				}	 
				state("readStep") { //this:State
					action { //it:State
						println("WAITERENGINE | Read Step")
						 
									CmdToMove = itunibo.planner.plannerUtil.getNextPlannedMove()
					}
					 transition( edgeName="goto",targetState="execStep", cond=doswitchGuarded({ CmdToMove == "w"  
					}) )
					transition( edgeName="goto",targetState="execMove", cond=doswitchGuarded({! ( CmdToMove == "w"  
					) }) )
				}	 
				state("execStep") { //this:State
					action { //it:State
						println("WAITERENGINE | Exec Step")
						updateResourceRep( "execStep"  
						)
						request("step", "step($StepTime)" ,"basicrobot" )  
					}
					 transition(edgeName="t121",targetState="updateMap",cond=whenReply("stepdone"))
					transition(edgeName="t122",targetState="errorHandler",cond=whenReply("stepfail"))
				}	 
				state("execMove") { //this:State
					action { //it:State
						println("WAITERENGINE | Exec Move")
						updateResourceRep( "execMove"  
						)
						forward("cmd", "cmd($CmdToMove)" ,"basicrobot" ) 
						delay(200) 
					}
					 transition( edgeName="goto",targetState="updateMap", cond=doswitch() )
				}	 
				state("updateMap") { //this:State
					action { //it:State
						println("WAITERENGINE | Update Map")
						updateResourceRep( itunibo.planner.plannerUtil.getMapOneLine()  
						)
						itunibo.planner.plannerUtil.updateMap( "$CmdToMove"  )
					}
					 transition( edgeName="goto",targetState="readStep", cond=doswitchGuarded({ CmdToMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="endDestination", cond=doswitchGuarded({! ( CmdToMove.length > 0  
					) }) )
				}	 
				state("errorHandler") { //this:State
					action { //it:State
						println("WAITERENGINE | Error Handler")
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(DURATION,CAUSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												val D = payloadArg(0).toLong()
												val Dt = Math.abs(StepTime - D)
												val BackT = D/2
								println("WAITERENGINE | Robotmapper stepFail - D = $D, BackTime = ${BackTime}, BackT = $BackT")
								if(  D > BackTime  
								 ){forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay(BackT)
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								}
								itunibo.planner.plannerUtil.showCurrentRobotState(  )
								updateResourceRep( "stepFail"  
								)
								delay(500) 
						}
					}
					 transition( edgeName="goto",targetState="readStep", cond=doswitchGuarded({ CmdToMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="endDestination", cond=doswitchGuarded({! ( CmdToMove.length > 0  
					) }) )
				}	 
				state("endDestination") { //this:State
					action { //it:State
						println("WAITERENGINE | End Destination")
						println("WAITERENGINE | Done moveTo($XPoint,$YPoint)")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						answer("moveTo", "done", "done($XPoint,$YPoint)"   )  
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("WAITERENGINE | End work")
						updateResourceRep( "endWork"  
						)
						terminate(0)
					}
				}	 
			}
		}
}
