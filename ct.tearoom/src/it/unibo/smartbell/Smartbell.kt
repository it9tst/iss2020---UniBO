/* Generated by AN DISI Unibo */ 
package it.unibo.smartbell

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Smartbell ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val TempMax = 37.5
				var ClientTemp = 36.0
				var ID_client = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("SMARTBELL | Start")
					}
					 transition( edgeName="goto",targetState="waitRing", cond=doswitch() )
				}	 
				state("waitRing") { //this:State
					action { //it:State
						println("SMARTBELL | Wait ring")
					}
					 transition(edgeName="t034",targetState="checkTempClient",cond=whenRequest("enterRequestClient"))
					transition(edgeName="t035",targetState="endWork",cond=whenDispatch("end"))
				}	 
				state("checkTempClient") { //this:State
					action { //it:State
						println("SMARTBELL | Check temp client")
						if( checkMsgContent( Term.createTerm("enterRequestClient(TEMP)"), Term.createTerm("enterRequestClient(TEMP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("SMARTBELL | Entry request from CLIENT with ID: $ID_client and TEMP: ${payloadArg(0)}")
								 ClientTemp = payloadArg(0).toDouble()  
						}
						if(  ClientTemp < TempMax  
						 ){println("SMARTBELL | The client can enter - Temp Ok")
						request("smartbellEnterRequest", "smartbellEnterRequest($ID_client)" ,"waitermind" )  
						}
						else
						 {println("SMARTBELL | The client can't enter - Temp Ko")
						 answer("enterRequestClient", "enterReplyFromSmartbellNeg", "enterReplyFromSmartbellNeg($ID_client)"   )  
						 forward("goToWaitRing", "goToWaitRing(PAYLOAD)" ,"smartbell" ) 
						 }
					}
					 transition(edgeName="t136",targetState="clientEnter",cond=whenReply("clientAccept"))
					transition(edgeName="t137",targetState="clientEnterWithTime",cond=whenReply("clientAcceptWithTime"))
					transition(edgeName="t138",targetState="waitRing",cond=whenDispatch("goToWaitRing"))
				}	 
				state("clientEnter") { //this:State
					action { //it:State
						println("SMARTBELL | The client can enter")
						if( checkMsgContent( Term.createTerm("clientAccept(TABLE)"), Term.createTerm("clientAccept(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("enterRequestClient", "enterReplyFromSmartbell", "enterReplyFromSmartbell($ID_client,${payloadArg(0)})"   )  
						}
						 ID_client++  
					}
					 transition( edgeName="goto",targetState="waitRing", cond=doswitch() )
				}	 
				state("clientEnterWithTime") { //this:State
					action { //it:State
						println("SMARTBELL | The client must wait time")
						if( checkMsgContent( Term.createTerm("clientAcceptWithTime(MAXSTAYTIME)"), Term.createTerm("clientAcceptWithTime(MAXWAITINGTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("enterRequestClient", "enterReplyFromSmartbellWithTime", "enterReplyFromSmartbellWithTime($ID_client,${payloadArg(0)})"   )  
						}
						 ID_client++  
					}
					 transition( edgeName="goto",targetState="waitRing", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("SMARTBELL | End work")
						terminate(0)
					}
				}	 
			}
		}
}
