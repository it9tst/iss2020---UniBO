/* Generated by AN DISI Unibo */ 
package it.unibo.maxstaytimetable2

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maxstaytimetable2 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val MaxStayTime 	= 100000L
				var StartTime 		= 0L
				var TimerDone 		= 0L
				var TimerGlobalDone = 0L
				var TimeAfterResume = 0L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | Start")
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | Wait")
						updateResourceRep( "maxstaytimetable2_wait"  
						)
					}
					 transition(edgeName="t051",targetState="newTimer",cond=whenDispatch("startTimer"))
					transition(edgeName="t052",targetState="wait",cond=whenDispatch("stopTimer"))
					transition(edgeName="t053",targetState="resume",cond=whenDispatch("resumeTimer"))
					transition(edgeName="t054",targetState="endWork",cond=whenDispatch("end"))
				}	 
				state("newTimer") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | newTimer")
						updateResourceRep( "maxstaytimetable2_newTimer"  
						)
						StartTime = getCurrentTime()
						
									TimerGlobalDone = 0
						stateTimer = TimerActor("timer_newTimer", 
							scope, context!!, "local_tout_maxstaytimetable2_newTimer", MaxStayTime )
					}
					 transition(edgeName="t155",targetState="timerExpired",cond=whenTimeout("local_tout_maxstaytimetable2_newTimer"))   
					transition(edgeName="t156",targetState="stop",cond=whenDispatch("stopTimer"))
				}	 
				state("stop") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | stop")
						updateResourceRep( "maxstaytimetable2_stop"  
						)
						TimerDone = getDuration(StartTime)
						
									TimerGlobalDone += TimerDone
					}
					 transition(edgeName="t257",targetState="resume",cond=whenDispatch("resumeTimer"))
				}	 
				state("resume") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | resume")
						updateResourceRep( "maxstaytimetable2_resume"  
						)
						
									TimeAfterResume = MaxStayTime - TimerGlobalDone
						StartTime = getCurrentTime()
						stateTimer = TimerActor("timer_resume", 
							scope, context!!, "local_tout_maxstaytimetable2_resume", TimeAfterResume )
					}
					 transition(edgeName="t358",targetState="timerExpired",cond=whenTimeout("local_tout_maxstaytimetable2_resume"))   
					transition(edgeName="t359",targetState="stop",cond=whenDispatch("stopTimer"))
				}	 
				state("timerExpired") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | timerExpired")
						forward("maxStayTimerExpired", "maxStayTimerExpired(2)" ,"maxstaytime" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("MAXSTAYTIMETABLE2 | End work")
						terminate(0)
					}
				}	 
			}
		}
}
