/* Generated by AN DISI Unibo */ 
package it.unibo.tearoomstatemanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Tearoomstatemanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var MaxWaitingTime = 0L
				var MaxWaitingTime1 = 0L
				var MaxWaitingTime2 = 0L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | Start")
						solve("consult('storage.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | wait")
						
									var StateRoom = ""
						solve("statetearoom(stateWaiter(SW),stateBarman(SB),stateTable(1,ST1),stateTable(2,ST2))","") //set resVar	
						if( currentSolution.isSuccess() ) {
										StateRoom = 
										"{\"Waiter\":"		+"\""+   	getCurSol("SW").toString()   +"\"," +
										"\"Barman\":"		+"\""+    	getCurSol("SB").toString()   +"\","  +
										"\"TABLE1\":"		+"\""+    	getCurSol("ST1").toString()   +"\","+
										"\"TABLE2\":" 		+"\""+		getCurSol("ST2").toString()   +"\""  +"}"
						}
						else
						{}
						updateResourceRep( "$StateRoom"  
						)
						println("##############################")
						println(StateRoom)
						println("##############################")
					}
					 transition(edgeName="t0101",targetState="waiterState",cond=whenDispatch("setWaiterState"))
					transition(edgeName="t0102",targetState="barmanState",cond=whenDispatch("setBarmanState"))
					transition(edgeName="t0103",targetState="tableState",cond=whenDispatch("setTableState"))
					transition(edgeName="t0104",targetState="occupyTableState",cond=whenDispatch("occupyTable"))
					transition(edgeName="t0105",targetState="orderReady",cond=whenDispatch("addOrderReady"))
					transition(edgeName="t0106",targetState="orderTaken",cond=whenDispatch("removeOrderReady"))
					transition(edgeName="t0107",targetState="endWork",cond=whenDispatch("end"))
					transition(edgeName="t0108",targetState="returnFreeCleanTable",cond=whenRequest("getTableFreeCleanRequest"))
					transition(edgeName="t0109",targetState="returnTableToClean",cond=whenRequest("getTableToCleanRequest"))
					transition(edgeName="t0110",targetState="returnTimerInform",cond=whenRequest("getTimerForInformRequest"))
					transition(edgeName="t0111",targetState="returnTableFromId",cond=whenRequest("getTableFromIdRequest"))
				}	 
				state("waiterState") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | waiterState")
						if( checkMsgContent( Term.createTerm("setWaiterState(STATE)"), Term.createTerm("setWaiterState(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("setWaiterState(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("barmanState") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | barmanState")
						if( checkMsgContent( Term.createTerm("setBarmanState(STATE)"), Term.createTerm("setBarmanState(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("setBarmanState(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("tableState") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | stateTable")
						if( checkMsgContent( Term.createTerm("setTableState(TABLE,STATE)"), Term.createTerm("setTableState(TABLE,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("setTableState(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("occupyTableState") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | occupyTableState")
						if( checkMsgContent( Term.createTerm("occupyTable(TABLE,ID)"), Term.createTerm("occupyTable(TABLE,ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("occupyTable(${payloadArg(0)},${payloadArg(1)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("orderReady") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | orderReady")
						if( checkMsgContent( Term.createTerm("addOrderReady(ID)"), Term.createTerm("addOrderReady(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("addOrderReady(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("orderTaken") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | orderTaken")
						if( checkMsgContent( Term.createTerm("removeOrderReady(ID)"), Term.createTerm("removeOrderReady(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("removeOrderReady(${payloadArg(0)})","") //set resVar	
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("returnFreeCleanTable") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | returnFreeCleanTable")
						if( checkMsgContent( Term.createTerm("getTableFreeCleanRequest(PAYLOAD)"), Term.createTerm("getTableFreeCleanRequest(PAYLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var TableSelected = 0	
								solve("stateTable(2,tableSanitized)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													TableSelected = 2	
								}
								else
								{}
								solve("stateTable(1,tableSanitized)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													TableSelected = 1	
								}
								else
								{}
								answer("getTableFreeCleanRequest", "getTableFreeCleanReply", "getTableFreeCleanReply($TableSelected)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("returnTableToClean") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | returnTableToClean")
						
									var TableSelectedToClean = 0
									var TableState1 = 0
									var TableState2 = 0
									var TableStateString1 = ""
									var TableStateString2 = ""
						solve("stateTable(1,STATE)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										TableStateString1 = getCurSol("STATE").toString()
										
										if (TableStateString1 == "tableDirty") {
											TableState1 = 1
										} else if (TableStateString1 == "tableCleared") {
											TableState1 = 2
										} else if (TableStateString1 == "tableCleaned") {
											TableState1 = 3
										}
						}
						else
						{}
						solve("stateTable(2,STATE)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										TableStateString2 = getCurSol("STATE").toString()
										
										if (TableStateString2 == "tableDirty") {
											TableState2 = 1
										} else if (TableStateString2 == "tableCleared") {
											TableState2 = 2
										} else if (TableStateString2 == "tableCleaned") {
											TableState2 = 3
										}
						}
						else
						{}
						
									if (TableState1 + TableState2 == 0) {
										TableSelectedToClean = 0
									} else if (TableState1 > TableState2) {
										TableSelectedToClean = 1
									} else {
										TableSelectedToClean = 2
									}
						if(  TableSelectedToClean == 0  
						 ){answer("getTableToCleanRequest", "getTableToCleanReply", "getTableToCleanReply(0,0)"   )  
						}
						if(  TableSelectedToClean == 1  
						 ){answer("getTableToCleanRequest", "getTableToCleanReply", "getTableToCleanReply(1,$TableStateString1)"   )  
						}
						if(  TableSelectedToClean == 2  
						 ){answer("getTableToCleanRequest", "getTableToCleanReply", "getTableToCleanReply(2,$TableStateString2)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("returnTimerInform") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | returnTimerInform")
						solve("stateTable(1,STATE)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										var Stato = getCurSol("STATE").toString()
										
										if (Stato == "tableDirty") {
											MaxWaitingTime1 = 6000L + 6000L + 5000L
										} else if (Stato == "tableCleared") {
											MaxWaitingTime1 = 6000L + 5000L
										} else if (Stato == "tableCleaned") {
											MaxWaitingTime1 = 5000L
										}
						}
						else
						{}
						solve("stateTable(2,STATE)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										var Stato = getCurSol("STATE").toString()
										
										if (Stato == "tableDirty") {
											MaxWaitingTime2 = 6000L + 6000L + 5000L
										} else if (Stato == "tableCleared") {
											MaxWaitingTime2 = 6000L + 5000L
										} else if (Stato == "tableCleaned") {
											MaxWaitingTime2 = 5000L
										}
						}
						else
						{}
						if(  MaxWaitingTime1 == 0L && MaxWaitingTime2 == 0L  
						 ){
										MaxWaitingTime = 6000L + 6000L + 5000L
						}
						else
						 {if(  MaxWaitingTime1 != 0L && MaxWaitingTime2 != 0L  
						  ){if(  MaxWaitingTime1 < MaxWaitingTime2  
						  ){answer("getTimerForInformRequest", "getTimerForInformReply", "getTimerForInformReply($MaxWaitingTime1)"   )  
						 
						 						MaxWaitingTime1 = 0L
						 						MaxWaitingTime2 = 0L
						 }
						 else
						  {answer("getTimerForInformRequest", "getTimerForInformReply", "getTimerForInformReply($MaxWaitingTime2)"   )  
						  
						  						MaxWaitingTime1 = 0L
						  						MaxWaitingTime2 = 0L
						  }
						 }
						 else
						  {if(  MaxWaitingTime1 != 0L || MaxWaitingTime2 != 0L  
						   ){if(  MaxWaitingTime1 > 0  
						   ){answer("getTimerForInformRequest", "getTimerForInformReply", "getTimerForInformReply($MaxWaitingTime1)"   )  
						  
						  							MaxWaitingTime1 = 0L
						  							MaxWaitingTime2 = 0L
						  }
						  else
						   {answer("getTimerForInformRequest", "getTimerForInformReply", "getTimerForInformReply($MaxWaitingTime2)"   )  
						   
						   							MaxWaitingTime1 = 0L
						   							MaxWaitingTime2 = 0L
						   }
						  }
						  }
						 }
					}
					 transition( edgeName="goto",targetState="maxStayTimeLeftTable1", cond=doswitchGuarded({ MaxWaitingTime != 0L  
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( MaxWaitingTime != 0L  
					) }) )
				}	 
				state("maxStayTimeLeftTable1") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | maxStayTimeLeftTable1")
						request("maxStayTimerLeftRequest", "maxStayTimerLeftRequest(1)" ,"maxstaytime" )  
					}
					 transition(edgeName="t0112",targetState="maxStayTimeLeftTable2",cond=whenReply("maxStayTimerLeftReply"))
				}	 
				state("maxStayTimeLeftTable2") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | maxStayTimeLeftTable2")
						if( checkMsgContent( Term.createTerm("maxStayTimerLeftReply(TIMERLEFT)"), Term.createTerm("maxStayTimerLeftReply(TIMERLEFT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("TEAROOMSTATEMANAGER | Maximum waiting time from the busy table1 is: ${payloadArg(0)} milliseconds")
								
												MaxWaitingTime1 = payloadArg(0).toLong()
						}
						request("maxStayTimerLeftRequest", "maxStayTimerLeftRequest(2)" ,"maxstaytime" )  
					}
					 transition(edgeName="t1113",targetState="maxStayTimeLeftCompare",cond=whenReply("maxStayTimerLeftReply"))
				}	 
				state("maxStayTimeLeftCompare") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | maxStayTimeLeftCompare")
						if( checkMsgContent( Term.createTerm("maxStayTimerLeftReply(TIMERLEFT)"), Term.createTerm("maxStayTimerLeftReply(TIMERLEFT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("TEAROOMSTATEMANAGER | Maximum waiting time from the busy table2 is: ${payloadArg(0)} milliseconds")
								
												MaxWaitingTime2 = payloadArg(0).toLong()
						}
						if(  MaxWaitingTime1 < MaxWaitingTime2  
						 ){
										MaxWaitingTime += MaxWaitingTime1
						}
						else
						 {
						 				MaxWaitingTime += MaxWaitingTime2
						 }
						answer("getTimerForInformRequest", "getTimerForInformReply", "getTimerForInformReply($MaxWaitingTime)"   )  
						
									MaxWaitingTime = 0L
									MaxWaitingTime1 = 0L
									MaxWaitingTime2 = 0L
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("returnTableFromId") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | returnTableFromId")
						if( checkMsgContent( Term.createTerm("getTableFromIdRequest(ID)"), Term.createTerm("getTableFromIdRequest(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var Table = "0"
								solve("stateTable(TABLE,tableOccupied(${payloadArg(0)}))","") //set resVar	
								if( currentSolution.isSuccess() ) {
													Table = getCurSol("TABLE").toString()
								}
								else
								{}
								answer("getTableFromIdRequest", "getTableFromIdReply", "getTableFromIdReply($Table)"   )  
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("TEAROOMSTATEMANAGER | End work")
						terminate(0)
					}
				}	 
			}
		}
}
