/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var OrderClient: String = ""
				
				var IdClientToConvoy = 0
				var TableSelectedToConvoy = 0
				
				var IdClientForOrder = 0
				var TableSelectedForOrder = 0
				
				var IdClientForCollect = 0
				var TableSelectedForCollect = 0
				
				var TableStateToClean = ""
				var TableSelectedToClean = 0
				
				val DelayHome = 2000L
				val DelayTakeClient = 2000L
				val DelayTakeOrder = 4000L
				val DelayServeOrder = 2000L
				val DelayCollectTime = 4000L
				
				var MoveX = 0
				var MoveY = 0
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("WAITERMIND | Start")
						solve("consult('storage.pl')","") //set resVar	
					}
					 transition(edgeName="t00",targetState="checkTableToClean",cond=whenDispatch("engineReady"))
				}	 
				state("rest") { //this:State
					action { //it:State
						println("WAITERMIND | rest")
						forward("setWaiterState", "setWaiterState(home)" ,"tearoomstatemanager" ) 
					}
					 transition(edgeName="t11",targetState="checkAcceptOrInform",cond=whenRequest("smartbellEnterRequest"))
					transition(edgeName="t12",targetState="checkTableForOrderIn",cond=whenDispatch("clientReadyToOrder"))
					transition(edgeName="t13",targetState="reachBarman",cond=whenDispatch("barmanCompleteOrder"))
					transition(edgeName="t14",targetState="checkTableToCollect",cond=whenDispatch("clientPayment"))
					transition(edgeName="t15",targetState="reachTableToKick",cond=whenDispatch("maxStayTimerExpired"))
					transition(edgeName="t16",targetState="endWork",cond=whenDispatch("end"))
				}	 
				state("checkQueue") { //this:State
					action { //it:State
						println("WAITERMIND | checkQueue")
						stateTimer = TimerActor("timer_checkQueue", 
							scope, context!!, "local_tout_waitermind_checkQueue", 100.toLong() )
					}
					 transition(edgeName="t27",targetState="checkTableToClean",cond=whenTimeout("local_tout_waitermind_checkQueue"))   
					transition(edgeName="t28",targetState="checkAcceptOrInform",cond=whenRequest("smartbellEnterRequest"))
					transition(edgeName="t29",targetState="checkTableForOrderIn",cond=whenDispatch("clientReadyToOrder"))
					transition(edgeName="t210",targetState="reachBarman",cond=whenDispatch("barmanCompleteOrder"))
					transition(edgeName="t211",targetState="checkTableToCollect",cond=whenDispatch("clientPayment"))
					transition(edgeName="t212",targetState="reachTableToKick",cond=whenDispatch("maxStayTimerExpired"))
				}	 
				state("checkTableToClean") { //this:State
					action { //it:State
						println("WAITERMIND | checkTableToClean")
						request("getTableToCleanRequest", "getTableToCleanRequest(PAYLOAD)" ,"tearoomstatemanager" )  
					}
					 transition(edgeName="t313",targetState="replyCheckTableToClean",cond=whenReply("getTableToCleanReply"))
				}	 
				state("replyCheckTableToClean") { //this:State
					action { //it:State
						println("WAITERMIND | replyCheckTableToClean")
						if( checkMsgContent( Term.createTerm("getTableToCleanReply(TABLE,STATE)"), Term.createTerm("getTableToCleanReply(TABLE,STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												TableSelectedToClean = payloadArg(0).toInt()
												TableStateToClean = payloadArg(1)
						}
					}
					 transition( edgeName="goto",targetState="reachHome", cond=doswitchGuarded({ TableSelectedToClean == 0  
					}) )
					transition( edgeName="goto",targetState="reachTableClean", cond=doswitchGuarded({! ( TableSelectedToClean == 0  
					) }) )
				}	 
				state("reachHome") { //this:State
					action { //it:State
						println("WAITERMIND | reachHome")
						delay(DelayHome)
						forward("setWaiterState", "setWaiterState(reachHome)" ,"tearoomstatemanager" ) 
						solve("pos(home,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { 
										MoveX = getCurSol("X").toString().toInt()
						            	MoveY = getCurSol("Y").toString().toInt()
						forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t414",targetState="rest",cond=whenDispatch("done"))
					transition(edgeName="t415",targetState="checkAcceptOrInform",cond=whenRequest("smartbellEnterRequest"))
					transition(edgeName="t416",targetState="checkTableForOrderIn",cond=whenDispatch("clientReadyToOrder"))
					transition(edgeName="t417",targetState="reachBarman",cond=whenDispatch("barmanCompleteOrder"))
					transition(edgeName="t418",targetState="checkTableToCollect",cond=whenDispatch("clientPayment"))
					transition(edgeName="t419",targetState="reachTableToKick",cond=whenDispatch("maxStayTimerExpired"))
				}	 
				state("reachTableClean") { //this:State
					action { //it:State
						println("WAITERMIND | reachTableClean")
						forward("setWaiterState", "setWaiterState(reachTableClean)" ,"tearoomstatemanager" ) 
						solve("pos('table$TableSelectedToClean',X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										MoveX = getCurSol("X").toString().toInt()
						               	MoveY = getCurSol("Y").toString().toInt()
						forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t520",targetState="whichCleanState",cond=whenDispatch("done"))
					transition(edgeName="t521",targetState="checkAcceptOrInform",cond=whenRequest("smartbellEnterRequest"))
					transition(edgeName="t522",targetState="checkTableForOrderIn",cond=whenDispatch("clientReadyToOrder"))
					transition(edgeName="t523",targetState="reachBarman",cond=whenDispatch("barmanCompleteOrder"))
					transition(edgeName="t524",targetState="checkTableToCollect",cond=whenDispatch("clientPayment"))
					transition(edgeName="t525",targetState="reachTableToKick",cond=whenDispatch("maxStayTimerExpired"))
				}	 
				state("whichCleanState") { //this:State
					action { //it:State
						println("WAITERMIND | whichCleanState")
						if(  TableStateToClean == "tableDirty"  
						 ){forward("goToClearing", "goToClearing(PAYLOAD)" ,"waitermind" ) 
						}
						if(  TableStateToClean == "tableCleared"  
						 ){forward("goToCleaning", "goToCleaning(PAYLOAD)" ,"waitermind" ) 
						}
						if(  TableStateToClean == "tableCleaned"  
						 ){forward("goToSanitizing", "goToSanitizing(PAYLOAD)" ,"waitermind" ) 
						}
					}
					 transition(edgeName="t626",targetState="tableCleared",cond=whenDispatch("goToClearing"))
					transition(edgeName="t627",targetState="tableCleaned",cond=whenDispatch("goToCleaning"))
					transition(edgeName="t628",targetState="tableSanitized",cond=whenDispatch("goToSanitizing"))
				}	 
				state("tableCleared") { //this:State
					action { //it:State
						println("WAITERMIND | tableCleared")
						forward("setWaiterState", "setWaiterState(cleaning)" ,"tearoomstatemanager" ) 
						request("clean", "clean($TableSelectedToClean,1)" ,"waiterengine" )  
					}
					 transition(edgeName="t729",targetState="checkQueue",cond=whenReply("cleanDone"))
				}	 
				state("tableCleaned") { //this:State
					action { //it:State
						println("WAITERMIND | tableCleaned")
						forward("setWaiterState", "setWaiterState(cleaning)" ,"tearoomstatemanager" ) 
						request("clean", "clean($TableSelectedToClean,2)" ,"waiterengine" )  
					}
					 transition(edgeName="t830",targetState="checkQueue",cond=whenReply("cleanDone"))
				}	 
				state("tableSanitized") { //this:State
					action { //it:State
						println("WAITERMIND | tableSanitized")
						forward("setWaiterState", "setWaiterState(cleaning)" ,"tearoomstatemanager" ) 
						request("clean", "clean($TableSelectedToClean,3)" ,"waiterengine" )  
					}
					 transition(edgeName="t931",targetState="checkQueue",cond=whenReply("cleanDone"))
				}	 
				state("checkAcceptOrInform") { //this:State
					action { //it:State
						println("WAITERMIND | checkAcceptOrInform")
						forward("stopMove", "stopMove(PAYLOAD)" ,"waiterengine" ) 
						request("getTableFreeCleanRequest", "getTableFreeCleanRequest(PAYLOAD)" ,"tearoomstatemanager" )  
						if( checkMsgContent( Term.createTerm("smartbellEnterRequest(ID)"), Term.createTerm("smartbellEnterRequest(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("WAITERMIND | Request from the client with ID: ${payloadArg(0)}")
								
												IdClientToConvoy = payloadArg(0).toInt()
						}
					}
					 transition(edgeName="t1032",targetState="replyCheckAcceptOrInform",cond=whenReply("getTableFreeCleanReply"))
				}	 
				state("replyCheckAcceptOrInform") { //this:State
					action { //it:State
						println("WAITERMIND | replyCheckAcceptOrInform")
						if( checkMsgContent( Term.createTerm("getTableFreeCleanReply(TABLE)"), Term.createTerm("getTableFreeCleanReply(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TableSelectedToConvoy = payloadArg(0).toInt() 	
						}
					}
					 transition( edgeName="goto",targetState="checkInform", cond=doswitchGuarded({ TableSelectedToConvoy == 0  
					}) )
					transition( edgeName="goto",targetState="accept", cond=doswitchGuarded({! ( TableSelectedToConvoy == 0  
					) }) )
				}	 
				state("checkInform") { //this:State
					action { //it:State
						println("WAITERMIND | checkInform")
						
									IdClientToConvoy = 0
						request("getTimerForInformRequest", "getTimerForInformRequest(PAYLOAD)" ,"tearoomstatemanager" )  
					}
					 transition(edgeName="t1133",targetState="replyInform",cond=whenReply("getTimerForInformReply"))
				}	 
				state("replyInform") { //this:State
					action { //it:State
						println("WAITERMIND | replyInform")
						if( checkMsgContent( Term.createTerm("getTimerForInformReply(TIMERLEFT)"), Term.createTerm("getTimerForInformReply(TIMERLEFT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer("smartbellEnterRequest", "clientAcceptWithTime", "clientAcceptWithTime($IdClientToConvoy,${payloadArg(0)})"   )  
						}
					}
					 transition( edgeName="goto",targetState="checkQueue", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						println("WAITERMIND | accept")
						println("WAITERMIND | Accept the client with ID: $IdClientToConvoy")
						answer("smartbellEnterRequest", "clientAccept", "clientAccept($IdClientToConvoy)"   )  
					}
					 transition( edgeName="goto",targetState="reachDoor", cond=doswitch() )
				}	 
				state("reachDoor") { //this:State
					action { //it:State
						println("WAITERMIND | reachDoor")
						forward("setWaiterState", "setWaiterState(reachDoor)" ,"tearoomstatemanager" ) 
						solve("pos(entrance,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										MoveX = getCurSol("X").toString().toInt()
						            	MoveY = getCurSol("Y").toString().toInt()
						forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t1234",targetState="convoyTable",cond=whenDispatch("done"))
				}	 
				state("convoyTable") { //this:State
					action { //it:State
						println("WAITERMIND | convoyTable")
						forward("setWaiterState", "setWaiterState(convoyTable)" ,"tearoomstatemanager" ) 
						delay(DelayTakeClient)
						forward("occupyTable", "occupyTable($TableSelectedToConvoy,$IdClientToConvoy)" ,"tearoomstatemanager" ) 
						solve("pos('table$TableSelectedToConvoy',X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {
										MoveX = getCurSol("X").toString().toInt()
						            	MoveY = getCurSol("Y").toString().toInt()
						forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						forward("startTimer", "startTimer($TableSelectedToConvoy)" ,"maxstaytime" ) 
						}
						else
						{}
					}
					 transition(edgeName="t1335",targetState="checkQueue",cond=whenDispatch("done"))
				}	 
				state("checkTableForOrderIn") { //this:State
					action { //it:State
						println("WAITERMIND | checkTableForOrderIn")
						forward("stopMove", "stopMove(PAYLOAD)" ,"waiterengine" ) 
						forward("setWaiterState", "setWaiterState(reachTableOrder)" ,"tearoomstatemanager" ) 
						if( checkMsgContent( Term.createTerm("clientReadyToOrder(ID)"), Term.createTerm("clientReadyToOrder(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("WAITERMIND | go to table for take the order from client with ID: ${payloadArg(0)}")
								  
												IdClientForOrder = payloadArg(0).toInt()
								request("getTableFromIdRequest", "getTableFromIdRequest($IdClientForOrder)" ,"tearoomstatemanager" )  
						}
					}
					 transition(edgeName="t1436",targetState="replyCheckTableForOrderIn",cond=whenReply("getTableFromIdReply"))
				}	 
				state("replyCheckTableForOrderIn") { //this:State
					action { //it:State
						println("WAITERMIND | replyCheckReachTableForOrder")
						if( checkMsgContent( Term.createTerm("getTableFromIdReply(TABLE)"), Term.createTerm("getTableFromIdReply(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TableSelectedForOrder = payloadArg(0).toInt()
								solve("pos('table$TableSelectedForOrder',X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													MoveX = getCurSol("X").toString().toInt()
								                	MoveY = getCurSol("Y").toString().toInt()
								}
								else
								{}
								forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
					}
					 transition(edgeName="t1537",targetState="takeOrder",cond=whenDispatch("done"))
				}	 
				state("takeOrder") { //this:State
					action { //it:State
						println("WAITERMIND | takeOrder")
						forward("setWaiterState", "setWaiterState(takeOrder)" ,"tearoomstatemanager" ) 
					}
					 transition(edgeName="t1638",targetState="sendOrderToBarman",cond=whenDispatch("clientOrder"))
				}	 
				state("sendOrderToBarman") { //this:State
					action { //it:State
						println("WAITERMIND | sendOrderToBarman")
						if( checkMsgContent( Term.createTerm("clientOrder(ID,ORDER)"), Term.createTerm("clientOrder(ID,ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  
												IdClientForOrder = payloadArg(0).toInt()
												OrderClient = payloadArg(1).toString()
								println("WAITERMIND | send to barman the order from client with ID: $IdClientForOrder and ORDER: $OrderClient")
								forward("setWaiterState", "setWaiterState(sendOrderToBarman)" ,"tearoomstatemanager" ) 
								forward("stopTimer", "stopTimer($TableSelectedForOrder)" ,"maxstaytime" ) 
								forward("sendOrder", "sendOrder($IdClientForOrder,$OrderClient)" ,"barman" ) 
								
												IdClientForOrder = 0
												OrderClient = ""
						}
					}
					 transition( edgeName="goto",targetState="checkQueue", cond=doswitch() )
				}	 
				state("reachBarman") { //this:State
					action { //it:State
						println("WAITERMIND | reachBarman")
						forward("stopMove", "stopMove(PAYLOAD)" ,"waiterengine" ) 
						if( checkMsgContent( Term.createTerm("barmanCompleteOrder(ID,ORDER)"), Term.createTerm("barmanCompleteOrder(ID,ORDER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("WAITERMIND | go to barman for the order for client with ID: ${payloadArg(0)} and ORDER: ${payloadArg(1)}")
								  
												IdClientForOrder = payloadArg(0).toInt()
												OrderClient = payloadArg(1).toString()
								forward("setWaiterState", "setWaiterState(reachBarman)" ,"tearoomstatemanager" ) 
								solve("pos(bar,X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													MoveX = getCurSol("X").toString().toInt()
								                	MoveY = getCurSol("Y").toString().toInt()
								}
								else
								{}
								forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
					}
					 transition(edgeName="t1739",targetState="checkTableForOrderOut",cond=whenDispatch("done"))
				}	 
				state("checkTableForOrderOut") { //this:State
					action { //it:State
						println("WAITERMIND | checkTableForOrderOut")
						delay(DelayTakeOrder)
						forward("removeOrderReady", "removeOrderReady($IdClientForOrder)" ,"tearoomstatemanager" ) 
						request("getTableFromIdRequest", "getTableFromIdRequest($IdClientForOrder)" ,"tearoomstatemanager" )  
					}
					 transition(edgeName="t1840",targetState="replyCheckTableForOrderOut",cond=whenReply("getTableFromIdReply"))
				}	 
				state("replyCheckTableForOrderOut") { //this:State
					action { //it:State
						println("WAITERMIND | replyCheckTableForOrderOut")
						if( checkMsgContent( Term.createTerm("getTableFromIdReply(TABLE)"), Term.createTerm("getTableFromIdReply(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TableSelectedForOrder = payloadArg(0).toInt()
								solve("pos('table$TableSelectedForOrder',X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													MoveX = getCurSol("X").toString().toInt()
								                	MoveY = getCurSol("Y").toString().toInt()
								}
								else
								{}
								forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
								forward("setWaiterState", "setWaiterState(reachTableServe)" ,"tearoomstatemanager" ) 
						}
					}
					 transition(edgeName="t1941",targetState="serve",cond=whenDispatch("done"))
				}	 
				state("serve") { //this:State
					action { //it:State
						println("WAITERMIND | serve")
						forward("setWaiterState", "setWaiterState(serve)" ,"tearoomstatemanager" ) 
						delay(DelayServeOrder)
						forward("resumeTimer", "resumeTimer($TableSelectedForOrder)" ,"maxstaytime" ) 
					}
					 transition( edgeName="goto",targetState="checkQueue", cond=doswitch() )
				}	 
				state("reachTableToKick") { //this:State
					action { //it:State
						println("WAITERMIND | reachTableToKick")
						forward("stopMove", "stopMove(PAYLOAD)" ,"waiterengine" ) 
						forward("setWaiterState", "setWaiterState(reachTableCollect)" ,"tearoomstatemanager" ) 
						if( checkMsgContent( Term.createTerm("maxStayTimerExpired(TABLE)"), Term.createTerm("maxStayTimerExpired(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("WAITERMIND | go to client of the table ${payloadArg(0)} for collect the payment, because the time has expired")
								
												TableSelectedForCollect = payloadArg(0).toInt()
								solve("pos('table$TableSelectedForCollect',X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													MoveX = getCurSol("X").toString().toInt()
								                	MoveY = getCurSol("Y").toString().toInt()
								}
								else
								{}
								forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
					}
					 transition(edgeName="t2042",targetState="collectPayment",cond=whenDispatch("done"))
				}	 
				state("checkTableToCollect") { //this:State
					action { //it:State
						println("WAITERMIND | checkTableToCollect")
						forward("stopMove", "stopMove(PAYLOAD)" ,"waiterengine" ) 
						forward("setWaiterState", "setWaiterState(reachTableCollect)" ,"tearoomstatemanager" ) 
						if( checkMsgContent( Term.createTerm("clientPayment(ID)"), Term.createTerm("clientPayment(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("WAITERMIND | go to client with ID: ${payloadArg(0)} for collect the payment")
								
												IdClientForCollect = payloadArg(0).toInt()
								request("getTableFromIdRequest", "getTableFromIdRequest($IdClientForCollect)" ,"tearoomstatemanager" )  
						}
					}
					 transition(edgeName="t2143",targetState="replyCheckTableToCollect",cond=whenReply("getTableFromIdReply"))
				}	 
				state("replyCheckTableToCollect") { //this:State
					action { //it:State
						println("WAITERMIND | replyCheckTableToCollect")
						if( checkMsgContent( Term.createTerm("getTableFromIdReply(TABLE)"), Term.createTerm("getTableFromIdReply(TABLE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												TableSelectedForCollect = payloadArg(0).toInt()
								solve("pos('table$TableSelectedForCollect',X,Y)","") //set resVar	
								if( currentSolution.isSuccess() ) {
													MoveX = getCurSol("X").toString().toInt()
								                	MoveY = getCurSol("Y").toString().toInt()
								}
								else
								{}
								forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
								forward("stopTimer", "stopTimer($TableSelectedForCollect)" ,"maxstaytime" ) 
						}
					}
					 transition(edgeName="t2244",targetState="collectPayment",cond=whenDispatch("done"))
				}	 
				state("collectPayment") { //this:State
					action { //it:State
						println("WAITERMIND | collectPayment")
						delay(DelayCollectTime)
						forward("setWaiterState", "setWaiterState(collectPayment)" ,"tearoomstatemanager" ) 
					}
					 transition( edgeName="goto",targetState="convoyExit", cond=doswitch() )
				}	 
				state("convoyExit") { //this:State
					action { //it:State
						println("WAITERMIND | convoyExit")
						forward("setWaiterState", "setWaiterState(convoyExit)" ,"tearoomstatemanager" ) 
						forward("setTableState", "setTableState($TableSelectedForCollect,tableDirty)" ,"tearoomstatemanager" ) 
						solve("pos(exit,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) {
											MoveX = getCurSol("X").toString().toInt()
						                	MoveY = getCurSol("Y").toString().toInt()
						forward("moveTo", "moveTo($MoveX,$MoveY)" ,"waiterengine" ) 
						}
						else
						{}
					}
					 transition(edgeName="t2345",targetState="checkQueue",cond=whenDispatch("done"))
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("WAITERMIND | End work")
						terminate(0)
					}
				}	 
			}
		}
}
