/* Generated by AN DISI Unibo */ 
package it.unibo.barman

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Barman ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val TimePrepareOrder = 20000L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("BARMAN | Start")
					}
					 transition( edgeName="goto",targetState="waitOrder", cond=doswitch() )
				}	 
				state("waitOrder") { //this:State
					action { //it:State
						println("BARMAN | Wait order")
					}
					 transition(edgeName="t039",targetState="prepareOrder",cond=whenDispatch("sendOrder"))
					transition(edgeName="t040",targetState="endWork",cond=whenDispatch("end"))
				}	 
				state("prepareOrder") { //this:State
					action { //it:State
						println("BARMAN | prepareOrder")
						if( checkMsgContent( Term.createTerm("sendOrder(ID,ORD)"), Term.createTerm("sendOrder(ID,ORD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("BARMAN | Prepare order for client with ID: ${payloadArg(0)} and ORD: ${payloadArg(1)}")
								delay(TimePrepareOrder)
								println("BARMAN | Order ready for client with ID: ${payloadArg(0)} and ORD: ${payloadArg(1)}")
								forward("barmanCompleteOrder", "barmanCompleteOrder(${payloadArg(0)},${payloadArg(1)})" ,"waitermind" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitOrder", cond=doswitch() )
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("BARMAN | End work")
						terminate(0)
					}
				}	 
			}
		}
}
