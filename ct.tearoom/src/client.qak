System client

// MESSAGES// Message between client - smartbell
Request enter_request_client			: enter_request_client (TEMP)
Reply   enter_reply_from_smartbell		: enter_reply_from_smartbell (ID)

// Message between client - waiter
Dispatch client_ready_to_order : client_ready_to_order (ID)
Dispatch client_payment : client_payment (ID)



// CONTEXT
Context ctxwaiter ip [host="127.0.0.1" port=8010]
Context ctxsmartbell ip [host="127.0.0.1" port=8020]
Context ctxclient ip [host="localhost" port=8030]

ExternalQActor waiter context ctxwaiter
ExternalQActor smartbell context ctxsmartbell



QActor client context ctxclient {
	[#
		var ID = 0
		var Client_temp = 36.0
	#]
	
	State s0 initial {
		// Initial state
		println("Client start")
	}
	Goto ringBell
	
	State ringBell {
		// Client rings the doorbell
		println("Tearoom is open")
		println("Client rings the doorbell")
		
		request smartbell -m enter_request_client : enter_request_client ($Client_temp)
	}
	Transition t0 	whenReply enter_reply_from_smartbell -> enter
	
	State enter {
		onMsg(enter_reply_from_smartbell : enter_reply_from_smartbell(ID)){
			println("Client ID: ${payloadArg(0)}")
			[# ID = payloadArg(0).toInt() #]
		}
	}
	Goto order
	
	State order {
		println("Client ID: ${payloadArg(0)} vuole ordinare")
		forward waiter -m client_ready_to_order : client_ready_to_order(ID)
	}
	Goto pay
	
	State pay {
		println("Client ID: ${payloadArg(0)} vuole pagare")
		forward waiter -m client_payment : client_payment(ID)
	}
	Goto exit
	
	State exit {
		println("Client ID: ${payloadArg(0)} esce")
	}
	Goto endWork

	State endWork {
		// Client end work
		println("Client end work")
		terminate 0
	}
}









