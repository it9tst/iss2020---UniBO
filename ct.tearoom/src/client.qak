System -msglog client

// MESSAGES CLIENT
// Message between client - smartbell
Request enter_request_client			: enter_request_client (TEMP)
Reply   enter_reply_from_smartbell		: enter_reply_from_smartbell (ID, TABLE)
Reply   enter_reply_from_smartbell_n	: enter_reply_from_smartbell_n (PAYLOAD)
Reply 	enter_reply_from_smartbell_with_time : enter_reply_from_smartbell_with_time (ID, MAXSTAYTIME)


// Message between client - waiter
Dispatch client_ready_to_order : client_ready_to_order (ID, ORD)
Dispatch client_payment : client_payment (ID)



// CONTEXT
Context ctxclient ip [host="127.0.0.1" port=50820] 
Context ctxtearoom ip [host="localhost" port=50810]

ExternalQActor waitermind context ctxtearoom
ExternalQActor smartbell context ctxtearoom



QActor client context ctxclient {
	[#
		var Client_ID = 0
		var Client_temp = 36.0
		var Client_MaxWaitTime = 1000
		var Client_table = 1
		var Client_Ord: String = ""
		val Menu : Array<String> = arrayOf("the", "acqua", "brioches", "cioccolata")
	#]
	
	State s0 initial {
		// Client initial state
		println("CLIENT | Start")
		updateResource [# "START" #]
	}
	Goto ringBell
	
	State ringBell {
		// Client rings the doorbell
		println("CLIENT | Rings the doorbell")
		updateResource [# "ringBell" #]
		
		request smartbell -m enter_request_client : enter_request_client ($Client_temp)
	}
	Transition t0 	whenReply enter_reply_from_smartbell -> enter
					whenReply enter_reply_from_smartbell_n -> goAway
					whenReply enter_reply_from_smartbell_with_time -> enterWithTime
	
	State enterWithTime {
		// Client wait
		updateResource [# "enterWithTime" #]
		onMsg(enter_reply_from_smartbell_with_time : enter_reply_from_smartbell_with_time(ID, MAXSTAYTIME)){
			if [# Client_MaxWaitTime < payloadArg(1).toInt() #] {
				println("CLIENT | ID: ${payloadArg(0)} | Wait with ${payloadArg(1)}")
			} else {
				println("CLIENT | ID: ${payloadArg(0)} | Not Wait")
			}
		}
	}
	Goto endWork
	
	State goAway {
		// Client go away because temp is KO
		updateResource [# "goAway" #]
		onMsg(enter_reply_from_smartbell_n : enter_reply_from_smartbell_n(ID)){
			println("CLIENT | ID: ${payloadArg(0)} | Go away because temp is KO: $Client_temp")
		}
	}
	Goto endWork
	
	State enter {
		// Client enter
		updateResource [# "enter" #]
		onMsg(enter_reply_from_smartbell : enter_reply_from_smartbell(ID, TABLE)){
			println("CLIENT | ID: ${payloadArg(0)} | Enter")
			[# 
				Client_ID = payloadArg(0).toInt()
				Client_table = payloadArg(1).toInt()
			#]
		}
		println("CLIENT | Premi invio per continuare e farlo ordinare e mangiare")
		[# readLine() #]
	}
	Goto order

	State order {
		// Client would like to order
		[#
			Client_Ord = Menu[Random.nextInt(0, 3)]
		#]
		println("CLIENT | ID: ${payloadArg(0)} | Would like to order $Client_Ord")
		updateResource [# "order" #]
		forward waitermind -m client_ready_to_order : client_ready_to_order($Client_ID, $Client_Ord)
		println("CLIENT | Premi invio per continuare e farlo pagare")
		[# readLine() #]
	}
	Goto pay
	
	State pay {
		// Client would like to pay
		println("CLIENT | ID: ${payloadArg(0)} | Would like to pay")
		updateResource [# "pay" #]
		forward waitermind -m client_payment : client_payment($Client_ID)
	}
	Goto exit
	
	State exit {
		// Client exit
		println("CLIENT || ID: ${payloadArg(0)} | Exit")
		updateResource [# "exit" #]
	}
	Goto endWork

	State endWork {
		// Client end work
		println("CLIENT | ID: ${payloadArg(0)} | End work")
		updateResource [# "endWork" #]
		terminate 0
	}
}