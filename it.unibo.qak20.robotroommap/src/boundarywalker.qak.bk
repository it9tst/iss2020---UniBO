/*
 * Builds a map of the room by using the planner
 */    
System boundarywalker
mqttBroker "localhost" : 1883 eventTopic "unibo/boundarywalker"

Dispatch cmd       : cmd(MOVE)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
  
Context ctxboundarywalker    ip [host="localhost"      port=8068]                
Context ctxbasicrobot         ip [host="127.0.0.1"   port=50800]    

ExternalQActor basicrobot    context ctxbasicrobot

QActor boundarywalker context ctxboundarywalker{         
[#
val mapname     = "tearoomBoundary"  		 
var NumStep     = 0
 
//REAL ROBOT
//var StepTime   = 600	 
    
//VIRTUAL ROBOT
 var StepTime   = 360L	  
#]
	State s0 initial {	 
  		delay 500 
		forward basicrobot -m cmd : cmd(l)  
		delay 300
		forward basicrobot -m cmd : cmd(r)    
		delay 300
  	}
   	Goto work
// 	  	Transition t0 whenMsg cmd -> work	//since we want to repeat ... See boundaryFound


  	State work{  		 
   		[# NumStep = 0   #] 
    	run itunibo.planner.plannerUtil.initAI()
  	}
    Goto detectBoundary  
     
    State detectBoundary{     
    	[# NumStep++ #]
    	println("roomboundaryexplorer detectBoundary $NumStep")
    	run itunibo.planner.plannerUtil.showCurrentRobotState()
    	updateResource [# "detectBoundary step=$NumStep" #]
     } 
    Goto doAheadMove if [# (NumStep<5) #] else boundaryFound
 
 	State doAheadMove{ 
   		request basicrobot -m step : step( $StepTime  )
	} 
	Transition t0   whenReply stepdone   -> stepDone   
					whenReply stepfail   -> stepFailed 
	 
 	State stepDone{  
 		updateResource [# itunibo.planner.plannerUtil.getMap() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
  	}
	Goto doAheadMove

	
	State stepFailed{  //has found an obstacle (a wall)
 		println("robotmapper | FOUND A WALL")
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# var Dt = payloadArg(0).toLong() / 4  #] 
			println("robotmapper | stepFail after: $Dt vs ${3*StepTime/4.0}")
			if [# Dt < 3*StepTime/4.0  #] {     
				forward basicrobot -m cmd : cmd( s )
				delayVar Dt
				forward basicrobot -m cmd : cmd( h )
			}	
 	 		if [# ! itunibo.planner.plannerUtil.atHome() #]{
	 			run itunibo.planner.plannerUtil.wallFound()
		 		updateResource [# "found a wall" #]
		 		forward basicrobot -m cmd : cmd(l) 
				delay 500 
				run itunibo.planner.plannerUtil.updateMap(  "l" )
				run itunibo.planner.plannerUtil.showCurrentRobotState()
 	 		}
		}	      
 	}   
    Goto detectBoundary  
 
 	State boundaryFound{
		run itunibo.planner.plannerUtil.saveRoomMap(mapname)
		println("robotmapper | FINAL MAP")   
 		run itunibo.planner.plannerUtil.showCurrentRobotState()	
 		updateResource [#  itunibo.planner.plannerUtil.getMap() #]
   		[# println(itunibo.planner.plannerUtil.showMap()) #]
  	}
    Transition t0 whenMsg cmd -> work
    
    
  	      
}	

 