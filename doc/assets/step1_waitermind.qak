System -msglog tearoom

// Message between smartbell - waiter
Request smartbellEnterRequest	: smartbellEnterRequest (ID)		
Reply   clientAccept			: clientAccept (ID)
Reply	clientAcceptWithTime 	: clientAcceptWithTime (ID, MAXSTAYTIME)

// MESSAGES BARMAN
// Message between barman - waiter
Dispatch sendOrder 				: sendOrder (ID, ORDER)
Dispatch barmanCompleteOrder 	: barmanCompleteOrder (ID, ORDER)

// MESSAGES WAITER
// Message between waiter - client
Dispatch informMaxWaitingTime	: informMaxWaitingTime (PAYLOAD)
Dispatch convoyToTable			: convoyToTable (TABLE)
Dispatch clientReadyToOrder 	: clientReadyToOrder (ID)
Dispatch clientOrder			: clientOrder (ID, ORDER)
Dispatch clientPayment 			: clientPayment (ID)

// Message between waiterengine - waitermind
Dispatch engineReady	: engineReady (PAYLOAD)
Dispatch moveTo			: moveTo (X, Y)
Dispatch done			: done (X, Y)
Dispatch stopMove		: stopMove (PAYLOAD)
Request	 clean			: clean (TABLE, STATE)
Reply	 cleanDone		: cleanDone (PAYLOAD)

// MESSAGES MAXSTAYTIME
Dispatch startTimer				: startTimer (TABLE)
Dispatch stopTimer				: stopTimer (TABLE)
Dispatch resumeTimer			: resumeTimer (TABLE)
Dispatch maxStayTimerExpired	: maxStayTimerExpired (TABLE)

Request maxStayTimerLeftRequest			: maxStayTimerLeftRequest (TABLE)
Reply maxStayTimerLeftReply				: maxStayTimerLeftReply (TIMERLEFT)
Request maxStayTimerLeftRequestToTable	: maxStayTimerLeftRequestToTable (PAYLOAD)
Reply maxStayTimerLeftReplyFromTable	: maxStayTimerLeftReplyFromTable (TIMERLEFT)

// MESSAGES TEAROOMSTATEMANAGER
Dispatch setWaiterState		: setWaiterState (STATE)
Dispatch setBarmanState		: setBarmanState (STATE)
Dispatch setTableState		: setTableState (TABLE, STATE)
Dispatch occupyTable		: occupyTable (TABLE, ID)
Dispatch addOrderReady		: addOrderReady (ID)
Dispatch removeOrderReady	: removeOrderReady (ID)

Request	getTableFreeCleanRequest	: getTableFreeCleanRequest (PAYLOAD)
Reply getTableFreeCleanReply		: getTableFreeCleanReply (TABLE)
Request	getTableToCleanRequest		: getTableToCleanRequest (PAYLOAD)
Reply getTableToCleanReply			: getTableToCleanReply (TABLE, STATE)
Request getTimerForInformRequest	: getTimerForInformRequest (PAYLOAD)
Reply getTimerForInformReply		: getTimerForInformReply (TIMERLEFT)
Request getTableFromIdRequest		: getTableFromIdRequest (ID)
Reply getTableFromIdReply			: getTableFromIdReply (TABLE)

Dispatch end : end (PAYLOAD)


Context ctxtearoom ip [host="localhost" port=50810]

QActor waitermind context ctxtearoom {
	
	State s0 initial {
		println("WAITERMIND | Start")
		
	}
	Transition t0	whenMsg engineReady -> checkTableToClean
	
	State rest {
		println("WAITERMIND | rest")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (home)
	}
	Transition t1	whenRequest smartbellEnterRequest -> checkAcceptOrInform
					whenMsg clientReadyToOrder -> checkTableForOrderIn
					whenMsg barmanCompleteOrder -> reachBarman
					whenMsg clientPayment -> checkTableToCollect
					whenMsg maxStayTimerExpired -> reachTableToKick
					whenMsg end -> endWork

	State checkQueue {
		println("WAITERMIND | checkQueue")
	}
	Transition t2	whenTime 100 -> checkTableToClean
					whenRequest smartbellEnterRequest -> checkAcceptOrInform
					whenMsg clientReadyToOrder -> checkTableForOrderIn
					whenMsg barmanCompleteOrder -> reachBarman
					whenMsg clientPayment -> checkTableToCollect
					whenMsg maxStayTimerExpired -> reachTableToKick

	State checkTableToClean {
		println("WAITERMIND | checkTableToClean")
		
		request tearoomstatemanager -m getTableToCleanRequest : getTableToCleanRequest (PAYLOAD)
	}
	Transition t3	whenReply getTableToCleanReply -> replyCheckTableToClean
	
	State replyCheckTableToClean {
		println("WAITERMIND | replyCheckTableToClean")
		onMsg (getTableToCleanReply : getTableToCleanReply (TABLE, STATE)) {
			// Get TABLE and STATE
		}
	}
	Goto reachHome if [# TableSelectedToClean == 0 #] else reachTableClean

	State reachHome {
		println("WAITERMIND | reachHome")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (reachHome)
		
		// Get HOME position
		forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
	}
	Transition t4	whenMsg done -> rest
					whenRequest smartbellEnterRequest -> checkAcceptOrInform
					whenMsg clientReadyToOrder -> checkTableForOrderIn
					whenMsg barmanCompleteOrder -> reachBarman
					whenMsg clientPayment -> checkTableToCollect
					whenMsg maxStayTimerExpired -> reachTableToKick
	
	State reachTableClean {
		println("WAITERMIND | reachTableClean")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (reachTableClean)
		
		// Get TABLE position
		forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
	}
	Transition t5 	whenMsg done -> whichCleanState
					whenRequest smartbellEnterRequest -> checkAcceptOrInform
					whenMsg clientReadyToOrder -> checkTableForOrderIn
					whenMsg barmanCompleteOrder -> reachBarman
					whenMsg clientPayment -> checkTableToCollect
					whenMsg maxStayTimerExpired -> reachTableToKick
	
	State whichCleanState {
		println("WAITERMIND | whichCleanState")
		
		// if table is Dirty
		forward waitermind -m goToClearing : goToClearing (PAYLOAD)
		
		// if table is Cleared
		forward waitermind -m goToCleaning : goToCleaning (PAYLOAD)
		
		// if table is Cleaned
		forward waitermind -m goToSanitizing : goToSanitizing (PAYLOAD)
	}
	Transition t6	whenMsg goToClearing 	-> tableCleared
					whenMsg goToCleaning 	-> tableCleaned
					whenMsg goToSanitizing 	-> tableSanitized
	
	State tableCleared {
		println("WAITERMIND | tableCleared")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (tableCleared)
				
		request waiterengine -m clean : clean (TABLE, 1)
	}
	Transition t7 	whenReply cleanDone -> checkQueue
	
	State tableCleaned {
		println("WAITERMIND | tableCleaned")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (tableCleaned)
		
		request waiterengine -m clean : clean (TABLE, 2)
	}
	Transition t8 	whenReply cleanDone -> checkQueue
	
	State tableSanitized {
		println("WAITERMIND | tableSanitized")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (tableSanitized)
		
		request waiterengine -m clean : clean (TABLE, 3)
	}
	Transition t9 	whenReply cleanDone -> checkQueue
	
	State checkAcceptOrInform {
		println("WAITERMIND | checkAcceptOrInform")
		
		forward waiterengine -m stopMove : stopMove (PAYLOAD)
		
		request tearoomstatemanager -m getTableFreeCleanRequest : getTableFreeCleanRequest (PAYLOAD)
		
		onMsg(smartbellEnterRequest : smartbellEnterRequest (ID)) {
			// Get ID
		}
	}
	Transition t10 	whenReply getTableFreeCleanReply -> replyCheckAcceptOrInform
	
	State replyCheckAcceptOrInform {
		println("WAITERMIND | replyCheckAcceptOrInform")
		
		onMsg (getTableFreeCleanReply : getTableFreeCleanReply (TABLE)) {
			// Get TABLE
		}
	}
	Goto checkInform if [# TableSelectedToConvoy == 0 #] else accept
	
	State checkInform {
		println("WAITERMIND | checkInform")

		request tearoomstatemanager -m getTimerForInformRequest : getTimerForInformRequest (PAYLOAD)
	}
	Transition t11	whenReply getTimerForInformReply -> replyInform
	
	State replyInform {
		println("WAITERMIND | replyInform")
		
		onMsg (getTimerForInformReply : getTimerForInformReply (TIMERLEFT)) {
			replyTo smartbellEnterRequest with clientAcceptWithTime : clientAcceptWithTime (ID, TIMERLEFT)
		}
	}
	Goto checkQueue
	
	State accept {
		println("WAITERMIND | accept")
		
		replyTo smartbellEnterRequest with clientAccept : clientAccept (ID)		
	}
	Goto reachDoor
	
	State reachDoor {
		println("WAITERMIND | reachDoor")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (reachDoor)
		
		// Get DOOR position
		forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
	}
	Transition t12	whenMsg done -> convoyTable
	
	State convoyTable {
		println("WAITERMIND | convoyTable")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (convoyTable)
		
		forward tearoomstatemanager -m occupyTable : occupyTable (TABLE, ID)
		
		// Get TABLE position
     	forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
     	forward maxstaytime -m startTimer : startTimer (TABLE)
	}
	Transition t13	whenMsg done -> checkQueue

	State checkTableForOrderIn {
		println("WAITERMIND | checkTableForOrderIn")
		
		forward waiterengine -m stopMove : stopMove (PAYLOAD)
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (reachTableOrder)
		
		onMsg(clientReadyToOrder : clientReadyToOrder (ID)) {
			// Get ID
			
			request tearoomstatemanager -m getTableFromIdRequest : getTableFromIdRequest (ID)
		}
	}
	Transition t14	whenReply getTableFromIdReply -> replyCheckTableForOrderIn
	
	State replyCheckTableForOrderIn {
		println("WAITERMIND | replyCheckReachTableForOrder")
		
		onMsg(getTableFromIdReply : getTableFromIdReply (TABLE)) {
			// Get TABLE position
			
			forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
		}
	}
	Transition t15	whenMsg done -> takeOrder
	
	State takeOrder {
		println("WAITERMIND | takeOrder")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (takeOrder)
	}
	Transition t16	whenMsg clientOrder -> sendOrderToBarman
	
	State sendOrderToBarman {
		println("WAITERMIND | sendOrderToBarman")
		
		onMsg(clientOrder : clientOrder (ID, ORDER)) {
			// Get ID and ORDER
			
			forward tearoomstatemanager -m setWaiterState : setWaiterState (sendOrderToBarman)
			
			forward maxstaytime -m stopTimer : stopTimer (TABLE)
			forward barman -m sendOrder : sendOrder (ID, ORDER)
		}
	}
	Goto checkQueue
	
	State reachBarman {
		println("WAITERMIND | reachBarman")
		
		forward waiterengine -m stopMove : stopMove (PAYLOAD)
		
		onMsg(barmanCompleteOrder : barmanCompleteOrder (ID, ORDER)) {
			// Get ID and ORDER
			
			forward tearoomstatemanager -m setWaiterState : setWaiterState (reachBarman)
			
			// Get TABLE position
            
            forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
		}
	}
	Transition t17	whenMsg done -> checkTableForOrderOut
	
	State checkTableForOrderOut {
		println("WAITERMIND | checkTableForOrderOut")
		
		delayVar DelayTakeOrder
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (getOrderFromBarman)
		forward tearoomstatemanager -m removeOrderReady : removeOrderReady (ID)
		request tearoomstatemanager -m getTableFromIdRequest : getTableFromIdRequest (ID)
	}
	Transition t18	whenReply getTableFromIdReply -> replyCheckTableForOrderOut
	
	State replyCheckTableForOrderOut {
		println("WAITERMIND | replyCheckTableForOrderOut")
		
		onMsg (getTableFromIdReply : getTableFromIdReply (TABLE)) {
			// Get TABLE
			
			// Get TABLE position
			
			forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
		}
	}
	Transition t19	whenMsg done -> serve
	
	State serve {
		println("WAITERMIND | serve")
		
		forward maxstaytime -m resumeTimer : resumeTimer (TABLE)
	}
	Goto checkQueue
	
	State reachTableToKick {
		println("WAITERMIND | reachTableToKick")
		
		forward waiterengine -m stopMove : stopMove (PAYLOAD)
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (reachTableCollect)
		
		onMsg(maxStayTimerExpired : maxStayTimerExpired (TABLE)) {
			// Get TABLE
			
			// Get TABLE position
            
            forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
		}
		
	}
	Transition t20	whenMsg done -> collectPayment
	
	State checkTableToCollect {
		println("WAITERMIND | checkTableToCollect")
		
		forward waiterengine -m stopMove : stopMove (PAYLOAD)
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState (reachTableCollect)
		
		onMsg(clientPayment : clientPayment (ID)) {
			// Get ID
			
			request tearoomstatemanager -m getTableFromIdRequest : getTableFromIdRequest (ID)
		}
	}
	Transition t21	whenReply getTableFromIdReply -> replyCheckTableToCollect
	
	State replyCheckTableToCollect {
		println("WAITERMIND | replyCheckTableToCollect")
		
		onMsg (getTableFromIdReply : getTableFromIdReply (TABLE)) {
			// Get TABLE
			
			// Get TABLE position
			
			forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
			forward maxstaytime -m stopTimer : stopTimer (TABLE)
		}
	}
	Transition t22	whenMsg done -> collectPayment
	
	State collectPayment {
		println("WAITERMIND | collectPayment")
		
		delayVar DelayCollectTime
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState(collectPayment)
	}
	Goto convoyExit
	
	State convoyExit {
		println("WAITERMIND | convoyExit")
		
		forward tearoomstatemanager -m setWaiterState : setWaiterState(convoyExit)
		
		forward tearoomstatemanager -m setTableState : setTableState ($TableSelectedForCollect, tableDirty)
		
		// Get EXIT position
		forward waiterengine -m moveTo : moveTo (MoveX, MoveY)
	}
	Transition t23	whenMsg done -> checkQueue

	State endWork {
		println("WAITERMIND | End work")
		terminate 0
	}
}